(coef[2,1] + c(-mean(mpg$wt),mean(mpg$wt))*qt(.975, df = fit$df)*coef[2,2])
(coef[2,1] + c(-mean(mtcars$wt),mean(mtcars$wt))*qt(.975, df = fit$df)*coef[2,2])
37.2851 -9.018046
summary(fit)
(coef[1,1] + c(-1,1)*qt(.975, df = fit$df)*coef[1,2])
(coef[2,1] + c(-mean(mtcars$wt),mean(mtcars$wt))*qt(.975, df = fit$df)*coef[2,2])
33.45050-9.018046
newwt= data.frame(wt=c(mean(mtcars$wt)))
newwt
predict(fit2, newdata=newwt,interval="confidence")
predict(fit, newdata=newwt,interval="confidence")
p1 = data.frame(predict(fit2, newdata=newwt,interval="confidence"))
p1 = data.frame(predict(fit, newdata=newwt,interval="confidence"))
fit2 <- lm(mpg~wt,data=mtcars)
coeffs <- summary(fit2)$coefficients
newwt= data.frame(wt=c(mean(mtcars$wt)))
newwt
fit2 <- lm(mpg~wt,data=mtcars)
coeffs <- summary(fit2)$coefficients
newwt= data.frame(wt=c(mean(mtcars$wt)))
newwt
p1 = data.frame(predict(fit2, newdata=newwt,interval="confidence"))
p1
predict(fit, interval = "confidence")
predict(fit,mean(mtcars$wt), interval = "confidence")
predict(fit,newdata=mean(mtcars$wt), interval = "confidence")
help("predict")
predict(coef, interval="confidence")
predict(coef, interval="confidence")
predict(coef, newdata=mean(mtcars$wt),interval="confidence")
fit3 <- lm(mpg~wt,data=mtcars)
newwt= data.frame(wt=c(3))
p2 = data.frame(predict(fit2, newdata=newwt,interval="predict"))
p2
newwt
sumary(fit)
summary(fit)
(coef[2,1] + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])/1000
-0.006486308*mean(mtcars$wt)
37.2851  -0.02086807
(coef[2,1] + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
-6.486308*mean(mtcars$wt)
37.26423-20.86807
(coef[1,1] + c(-1,1)*qt(.975, df = fit$df)*coef[1,2])
33.45050--20.86807
33.45050-20.86807
-4.202635*mean(mtcars$wt)
37.2851 -13.52093
37.2851-6.486308*mean(mtcars$wt)
37.2851-(5.3445*mean(mtcars$wt))
37.2851-(6.486308*mean(mtcars$wt))
37.2851-(5.3445*mean(mtcars$wt))
(20.09051 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
(coef[1,1] + c(-1,1)*qt(.975, df = fit$df)*coef[1,2])/1000
(coef[2,1] + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
37.2851-(5.3445*3)
21.2516 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
21.2516 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2]
37.2851 -(5.3445*3)
37.2851 -(5.3445*3000)
37.2851 -(5.3445*3)
(coef[2,1] + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])/1000
21.2516 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])/1000
21.2516 + ((c(-1,1)*qt(.975, df = fit$df)*coef[2,2])/1000)
21.2516 + (c(-1,1)*qt(.975, df = fit$df)*coef[2,2]))
21.2516 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2]
37.2851-(5.3445*mean(mtcars$wt))
(20.09051 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
37.2851-(5.3445*3)
(21.2516 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
37.2851-(5.3445*30)
37.2851-(5.3445*.3)
(35.68175 + c(-1,1)*qt(.975, df = fit$df)*coef[2,2])
rm()
library(swirl)
install_from_swirl("Regression Models")
swirl
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
lm(child~parent, data =galton)
fit <- lm(child~parent, data =galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
for (n in 1:6) lhs[n] <- sqe(ols.slope+sltweak[n],ols.ic+ictweak[n])
lhs-rhs
all.equal(lhs,rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.ic,ols.slope))
varEst <- var(est(ols.slope, ols.ic))
all.equal(varRes, varEst)
all.equal(varChild,varEst+varRes)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data = galton)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum(galton$child - mu)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(sum(fit$residuals)^2)
da
2
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child,galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ ., data = swiss)
lm(Fertility ~ ., swiss)
all <- lm(Fertility ~ ., swiss)
summary(all)
fit(Fertility ~ Agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
lm(Fertility ~ . + ec, swiss)
efit <- lm(Fertility ~ . + ec, swiss)
efit$coefficients - all$coefficients
all$coefficients-efit$coefficients
swirl()
swirl
library(swirl)
swirl()
6
dim(InsectSprays)
head(15)
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays)
sapply(class,InsectSprays)
sapply(class(InsectSprays))
1
sapply(InsectSprays,class)
fit <- lm(count ~ spray, data = InsectSprays)
summary(fit)$coeff
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, data = InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray2, data = InsectSprays)
summary(fit)$coef
summary(fit1)$coef
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data = hunger)
summary(fit)$coef
lmf <- lm(Numeric ~ Year, data = hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmIter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- out2[-1, ]
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fitno) - coef(fit)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
1
sigma <- sqrt(deviance(fit)/df.residual(fit))
3
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
Use plot(fit, which=2)
plot(fit, which=2)
3
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
1
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
2
head(rstudent(fit))
2
dy <- predict(fitno, out2)-predict(fit, out2)
2
sum(dy^2)/(2*sigma^2)
2
plot(fit, which=5)
library(swirl)
swirl()
install.packages(car)
install.packages('car')
R.version.string
head(mtcars)
?mtcars
lm(formula = mpg ~ factor(am), data = mtcars)
f1 <- lm(formula = mpg ~ factor(am), data = mtcars)
summary(f1)
f1 <- lm(formula = mpg ~ factor(am) -1, data = mtcars)
summary(f1)
f1 <- lm(formula = mpg ~ factor(am), data = mtcars)
summary(f1)
f1 <- lm(formula = mpg ~ I(factor(am)-1), data = mtcars)
f1 <- lm(formula = mpg ~ I(factor(am) - 1), data = mtcars)
f1 <- lm(formula = mpg ~ I(factor(am))-1, data = mtcars)
summary(f1)
f1 <- lm(formula = mpg ~ factor(am), data = mtcars)
summary(f1)
f2 <- lm(mpg ~ . , mtcars)
summary(f2)
f2 <- lm(mpg ~ . -1 , mtcars)
summary(f2)
f2 <- lm(mpg ~ I(. -1) , mtcars)
f2 <- lm(mpg ~ I(.) -1 , mtcars)
f2 <- lm(mpg ~ I(. -1) , mtcars)
f2 <- lm(mpg ~ . -1 , mtcars)
summary(f2)
f2 <- lm(mpg ~ ., mtcars)
summary(f2)
plot(f1)
summary(f1)
mpg$am <- as.factor(mpg$am)
mtcars$am <- as.factor(mtcars$am)
f2 <- lm(mpg ~ ., mtcars)
summary(f2)
f2 <- lm(mpg ~ . - 1, mtcars)
summary(f2)
f2 <- lm(mpg ~ ., mtcars)
summary(f2)
summary(mtcars)
mpg$cyl <- as.factor(mpg$cyl)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
f2 <- lm(mpg ~ ., mtcars)
summary(f2)
f2 <- lm(mpg ~ . - 1, mtcars)
summary(f2)
pairs(mpg ~ ., data = mtcars)
cor(mtcars)[1,]
head(mtcars)
cor(mtcars)[1,]
plot(mtcars)
plot(mtcars$am)
mtcars$am <- as.factor(mtcars$am)
fit1 <- lm(mpg ~ am + cyl, mtcars)
summary(mtcars)
summary(fit1)
mtcars$cyl <- as.factor(mtcars$cyl)
fit1 <- lm(mpg ~ am + cyl, mtcars)
summary(fit1)
fit2 <- lm(mpg ~ am + cyl-1, mtcars)
summary(fit2)
values(mtcars$cyl)
(mtcars$cyl)
fit1 <- lm(mpg ~ am + cyl, mtcars)
summary(fit1)
sort(cor(mtcars)[1,])
data(mtcars)
sort(cor(mtcars)[1,])
fit1 <- lm(mpg ~ wt + cyl + disp + hp + vs + drat, mtcars)
mtcars2 <- mtcars
mtcars2$am <- as.factor(mtcars2$am)
sort(cor(mtcars2)[1,])
fit1 <- lm(mpg ~ . , mtcars)
summary(fit1)
rm(mtcars2)
View(mtcars)
mtcars$am <- as.factor(mtcars$am)
fit1 <- lm(mpg ~ . , mtcars)
summary(fit1)
fit2 <- lm(mpg ~ am + cyl + drat + qsec + vs + gear + carb, mtcars)
summary(fit2)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
?mtcars
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
mtcars$am <- as.factor(mtcars$am)
fit1 <- lm(mpg ~ am, mtcars)
summary(fit1)
fit2 <- lm(mpg ~ ., mtcars)
summary(fit2)
fit3 <- lm(mpg ~ am + cyl + wt + hp + disp + vs + drat, mtcars)
summary(fit3)
fit4 <- lm(mpg ~ am + wt + hp, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cy;, mtcars)
fit4 <- lm(mpg ~ am + wt + hp + cyl, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl + vs + gear + carb, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl + vs + gear, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl + vs, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl + vs, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + qsec, mtcars)
summary(fit4)
step(lm(mpg~.,data=mtcars),direction="both")
fit4 <- lm(mpg ~ am + wt + hp + cyl, mtcars)
summary(fit4)
fit4 <- lm(mpg ~ am + wt + hp + cyl, mtcars)
fit5 <- lm(mpg ~ am + wt + hp + cyl + vs, mtcars)
summary(fit5)
anova(fit4, fit5)
test <- anova(fit4, fit5)
summary(test)
test
qqplot(fit4)
plot(fit4)
summary(fit1)
?mtcars
summary(fit4)
lm(mpg~ am + wt + hp + cyl -1, mtcars)
summary(fit5)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
data(AlzheimerDisease)
data(ALL)
data(AL)
data(AlzheimerDisease)
data('AlzheimerDisease')
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
View(predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages('caret')
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages('caret', dependencies = TRUE)
install.packages('pROC')
install.packages('pROC')
install.packages(c("BH", "broom", "caTools", "codetools", "cpp11", "data.table", "DBI", "diffobj", "dplyr", "fansi", "foreign", "ggplot2", "hms", "htmltools", "jsonlite", "KernSmooth", "Matrix", "nlme", "pbkrtest", "pkgbuild", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "sp", "SQUAREM", "testthat", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("BH", "broom", "caTools", "codetools", "cpp11", "data.table", "DBI", "diffobj", "dplyr", "fansi", "foreign", "ggplot2", "hms", "htmltools", "jsonlite", "KernSmooth", "Matrix", "nlme", "pbkrtest", "pkgbuild", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "sp", "SQUAREM", "testthat", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("BH", "broom", "caTools", "codetools", "cpp11", "data.table", "DBI", "diffobj", "dplyr", "fansi", "foreign", "ggplot2", "hms", "htmltools", "jsonlite", "KernSmooth", "Matrix", "nlme", "pbkrtest", "pkgbuild", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "sp", "SQUAREM", "testthat", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("BH", "broom", "caTools", "codetools", "cpp11", "data.table", "DBI", "diffobj", "dplyr", "fansi", "foreign", "ggplot2", "hms", "htmltools", "jsonlite", "KernSmooth", "Matrix", "nlme", "pbkrtest", "pkgbuild", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "rlang", "rmarkdown", "sp", "SQUAREM", "testthat", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("DBI", "dplyr", "fansi", "hms", "Rcpp", "tibble"))
install.packages(c("DBI", "dplyr", "fansi", "hms", "Rcpp", "tibble"))
install.packages(c("DBI", "dplyr", "fansi", "hms", "Rcpp", "tibble"))
install.packages(c("DBI", "dplyr", "fansi", "hms", "Rcpp", "tibble"))
install.packages(c("dplyr", "fansi", "Rcpp", "tibble"))
install.packages("dplyr")
install.packages(c("DBI", "dplyr", "fansi", "hms", "libcoin", "Rcpp", "tibble"))
install.packages(c("DBI", "dplyr", "fansi", "hms", "libcoin", "Rcpp", "tibble"))
install.packages(c("dplyr", "fansi", "libcoin", "Rcpp", "tibble"))
install.packages(c("dplyr", "fansi", "libcoin", "Rcpp", "tibble"))
install.packages("dplyr")
install.packages("Rcpp")
install.packages("tibble")
R.version.stroing
R.version.string
install.packages("dplyr", repo = 'https://mac.R-project.org')
install.packages(c("dplyr", "fansi", "libcoin", "Rcpp", "tibble"))
install.packages("libcoin")
install.packages("libcoin")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages('caret')
install.packages('AppliedPredictiveModeling')
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(AppliedPredictiveModeling)
library(caret)
data(segmentationOriginal)
set.seed(125)
trainSet <- segmentationOriginal[segmentationOriginal$Case =="Train",]
testSet <- segmentationOriginal[segmentationOriginal$Case =="Test",]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
View(segmentationOriginal)
library(caret)
set.seed(125)
trainSet <- segmentationOriginal[segmentationOriginal$Case =="Train",]
testSet <- segmentationOriginal[segmentationOriginal$Case =="Test",]
View(testSet)
View(trainSet)
set.seed(125)
fit <- train(Class~.,data=trainSet,method="rpart")
plot(fit$finalModel, uniform=TRUE,
main="Classification Tree")
text(fit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
View(olive)
fit <- train(Area~.,data=olive,method="rpart")
predict(fit,newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.sp
install.packages('ElemStatLearn')
install.packages('ElemStatLearn')
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modelFit_rf<-train(diagnosis~., method="rf", data=training)
set.seed(62433)
modelFit_rf<-train(diagnosis~., method="rf", data=training)
modelFit_gbm<-train(diagnosis~., method="gbm", data=training,verbose=FALSE)
modelFit_lda<-train(diagnosis~., method="lda", data=training)
predict_rf<-predict(modelFit_rf,newdata=testing)
predict_gbm<-predict(modelFit_gbm,newdata=testing)
predict_lda<-predict(modelFit_lda,newdata=testing)
confusionMatrix(predict_rf, testing$diagnosis)$overall['Accuracy']
confusionMatrix(predict_gbm, testing$diagnosis)$overall['Accuracy']
confusionMatrix(predict_lda, testing$diagnosis)$overall['Accuracy']
predDF <- data.frame(predict_rf, predict_gbm, predict_lda, diagnosis = testing$diagnosis)
#create a new model using the new data frame and rf method
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, testing$diagnosis)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modFit<-train(CompressiveStrength ~ ., method="lasso", data=training)
set.seed(233)
modFit<-train(CompressiveStrength ~ ., method="lasso", data=training)
plot.enet(modFit$finalModel, xvar = "penalty", use.color = TRUE)
?plot.enet
install.packages('plot.enet')
library(lubridate) # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
setwd("~/coursera/courses/09_DevelopingDataProducts/crsproj/hw1")
library(leaflet)
mymap <- leaflet() %>% addTiles() %>% addMarkers(lat = 14.648282, lng = 121.049850, popup = "University of the Philippines Diliman")
mymap
